<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- mapper:根标签，namespace：命名空间，随便写，一般保证命名空间唯一 -->

<!-- mapper.xml namespace
     如果希望使用mybatis通过的动态代理的接口，就需要namespace中的值，和需要对应的Mapper(dao)接口的全路径一致。Mapper中Namespace的定义本身是没有限制的，
     只要不重复即可，但如果使用Mybatis的DAO接口动态代理，则namespace必须为DAO接口的全路径，例如：com.zpc.mybatis.dao.UserDao -->

<mapper namespace="com.kpy.mybatis.dao.UserMapper">
    <!-- 开启二级缓存，使用默认参数，二级缓存的作用域是一个mapper的namespace，同一个namespace中查询sql可以从缓存中命中 -->
    <cache/>

    <!--
       1.#{},预编译的方式preparedStatement，使用占位符替换，防止sql注入，一个参数的时候，任意参数名可以接收
       2.${},普通的Statement，字符串直接拼接，不可以防止sql注入，一个参数的时候，必须使用${value}接收参数
     -->

    <!-- CURD语法规则SQL Statement：id：唯一标识，随便写，在同一个命名空间下保持唯一
         resultType：sql语句查询结果集的封装类型,t_user即为数据库中的表 -->
    <select id="QueryMaxId" resultType="String">
        select ifnull((max(id)),0) from t_user;
    </select>

    <!-- statement，内容：sql语句。
         id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致
         resultType：sql语句查询结果集的封装类型，使用动态代理之后和方法的返回类型一致；resultMap：二选一
         parameterType：参数的类型，使用动态代理之后和方法的参数类型一致
    -->

    <!-- resultMap用法 -->
    <resultMap id="user" type="com.kpy.mybatis.pojo.User"/>
    <select id="SelectOne" parameterType="String" resultMap="user">
        select * from t_user where id = #{id}
    </select>

    <!-- resultType用法 -->
    <select id="SelectUser" resultType="com.kpy.mybatis.pojo.User">
        select * from t_user where id = #{id}
    </select>

    <select id="SelectByTableName" resultType="com.kpy.mybatis.pojo.User">
        select * from ${tableName}
    </select>
    
    <select id="Login" resultType="com.kpy.mybatis.pojo.User">
        select * from t_user where user_name=#{user_name} and password=#{password}
    </select>

    <select id="SelectAll" resultType="com.kpy.mybatis.pojo.User">
        select * from t_user
    </select>

    <!-- 新增的Statement
         id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致
         parameterType：参数的类型，使用动态代理之后和方法的参数类型一致
         useGeneratedKeys:开启主键回写
         keyColumn：指定数据库的主键
         keyProperty：主键对应的pojo属性名
     -->
    <insert id="Insert" parameterType="com.kpy.mybatis.pojo.User">
        insert into t_user(id, user_name, password, name, age, sex, birthday, created, updated) values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            #{id},
            <if test="user_name!=null">#{user_name},</if>
            <if test="password!=null">#{password},</if>
            <if test="name!=null">#{name},</if>
            <if test="age!=null">#{age},</if>
            <if test="sex!=null">#{sex},</if>
            <if test="birthday!=null">#{birthday},</if>
            now(),
            now()
        </trim>
    </insert>

    <!--
         更新的statement
         id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致
         parameterType：参数的类型，使用动态代理之后和方法的参数类型一致
     -->
    <update id="Update" parameterType="com.kpy.mybatis.pojo.User">
        UPDATE t_user
        <trim prefix="set" suffixOverrides=",">
            <if test="userName!=null">user_name = #{user_name},</if>
            <if test="password!=null">password = #{password},</if>
            <if test="name!=null">name = #{name},</if>
            <if test="age!=null">age = #{age},</if>
            <if test="sex!=null">sex = #{sex},</if>
            <if test="birthday!=null">birthday = #{birthday},</if>
            updated = now(),
        </trim>
        WHERE id = #{id};
    </update>

    <!--
         删除的statement
         id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致
         parameterType：参数的类型，使用动态代理之后和方法的参数类型一致
     -->
    <delete id="Delete" parameterType="String">
        delete from t_user where id=#{id}
    </delete>
</mapper>